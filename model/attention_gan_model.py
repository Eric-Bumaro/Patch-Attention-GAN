import os
from collections import OrderedDict
import torch
import itertools
from model.networks import Generator, Discriminator, Biformer_Encoder
from model.utils import LambdaLR, print_networks, GANLoss, ContentLoss, BackGroundMaskLoss

from model.utils import ImagePool


class CycleGANModel:
    def __init__(self, config):
        self.config = config
        self.visual_names = ['real_A', 'fake_B', 'real_B', "fake_A",
                             "fake_B_background_mask", "fake_B_foreground_list",
                             "rec_A", "rec_B"]
        self.device = torch.device('cuda:{}'.format(config.gpu_ids[0])) if self.config and torch.cuda.is_available() \
            else torch.device('cpu')

        self.encoder = Biformer_Encoder(intput_nc=config.input_nc, dim=config.crop_size)
        # self.encoder_B = Biformer_Encoder(intput_nc=config.input_nc, dim=config.crop_size)
        self.netG_A = Generator(self.encoder, config.init_type, config.init_gain, config.gpu_ids,
                                output_nc=config.output_nc)
        self.netG_B = Generator(self.encoder, config.init_type, config.init_gain, config.gpu_ids,
                                output_nc=config.output_nc)

        if config.phase == "train":  # define discriminators
            self.netD_A = Discriminator(config.init_type, config.init_gain, config.gpu_ids, config.input_nc,
                                        config.ndf)
            self.netD_B = Discriminator(config.init_type, config.init_gain, config.gpu_ids, config.input_nc,
                                        config.ndf)

        self.fake_A_pool = ImagePool(config.pool_size)  # create image buffer to store previously generated images
        self.fake_B_pool = ImagePool(config.pool_size)  # create image buffer to store previously generated images
        # define loss functions
        self.criterionGAN = GANLoss(config.gan_mode).to(self.device)  # define GAN loss.
        self.criterionCycle = torch.nn.L1Loss().to(self.device)
        self.criterionIdt = torch.nn.L1Loss().to(self.device)
        self.criterionContent = ContentLoss().to(self.device)
        self.criterionBackgroundMask = BackGroundMaskLoss().to(self.device)
        self.load_networks()

    def set_input(self, input):
        AtoB = self.config.direction == 'AtoB'
        self.real_A = input['A' if AtoB else 'B'].to(self.device)
        self.real_B = input['B' if AtoB else 'A'].to(self.device)
        self.image_paths = input['A_paths' if AtoB else 'B_paths']

    def forward(self):
        """Run forward pass; called by both functions <optimize_parameters> and <test>."""
        self.fake_B, self.real_A_content, self.fake_B_background_mask, self.fake_B_foreground_list = self.netG_A(
            self.real_A)  # G_A(A)
        self.rec_A, self.rec_A_content, self.rec_A_background_mask, self.rec_A_foreground_list = self.netG_B(self.fake_B)  # G_B(G_A(A))
        self.fake_A, self.real_B_content, self.fake_A_background_mask, self.fake_A_foreground_list = self.netG_B(
            self.real_B)  # G_B(B)
        self.rec_B, self.rec_B_content, self.rec_B_background_mask, self.rec_B_foreground_list = self.netG_A(self.fake_A)  # G_A(G_B(B))

    def backward_D_basic(self, netD, real, fake):
        """Calculate GAN loss for the discriminator
        Parameters:
            netD (network)      -- the discriminator D
            real (tensor array) -- real images
            fake (tensor array) -- images generated by a generator
        Return the discriminator loss.
        We also call loss_D.backward() to calculate the gradients.
        """
        # Real
        pred_real = netD(real)
        loss_D_real = self.criterionGAN(pred_real, True)
        # Fake
        pred_fake = netD(fake.detach())
        loss_D_fake = self.criterionGAN(pred_fake, False)
        # Combined loss and calculate gradients
        loss_D = (loss_D_real + loss_D_fake) * 0.5
        loss_D.backward()
        return loss_D

    def backward_D_A(self):
        """Calculate GAN loss for discriminator D_A"""
        fake_B = self.fake_B_pool.query(self.fake_B)
        self.loss_D_A = self.backward_D_basic(self.netD_A, self.real_B, fake_B)
        return self.loss_D_A.item()

    def backward_D_B(self):
        """Calculate GAN loss for discriminator D_B"""
        fake_A = self.fake_A_pool.query(self.fake_A)
        self.loss_D_B = self.backward_D_basic(self.netD_B, self.real_A, fake_A)
        return self.loss_D_B.item()

    def backward_G(self):
        """Calculate the loss for generators G_A and G_B"""
        lambda_idt = self.config.lambda_identity
        lambda_A = self.config.lambda_A
        lambda_B = self.config.lambda_B
        lambda_content = self.config.lambda_content
        lambda_background_mask = self.config.lambda_background_mask
        # Identity loss
        if lambda_idt > 0:
            # G_A should be identity if real_B is fed: ||G_A(B) - B||
            self.idt_B, self.idt_B_content, self.idt_B_background_mask, self.idt_B_foreground_list = self.netG_A(
                self.real_B)
            self.loss_idt_B = self.criterionIdt(self.idt_B, self.real_B) * lambda_B * lambda_idt
            # G_B should be identity if real_A is fed: ||G_B(A) - A||
            self.idt_A, self.idt_A_content, self.idt_A_background_mask, self.idt_A_foreground_list = self.netG_B(
                self.real_A)
            self.loss_idt_A = self.criterionIdt(self.idt_A, self.real_A) * lambda_A * lambda_idt
        else:
            self.loss_idt_A = 0
            self.loss_idt_B = 0

        # content loss
        self.content_loss = (self.criterionContent(self.real_A_content, self.rec_A_content) +
                             self.criterionContent(self.real_B_content, self.rec_B_content)) * lambda_content
        # backgournd mask loss
        self.background_mask_loss = (self.criterionBackgroundMask(self.fake_B_background_mask,
                                                                  self.idt_A_background_mask,
                                                                  self.rec_A_background_mask) +
                                     self.criterionBackgroundMask(self.fake_A_background_mask,
                                                                  self.idt_B_background_mask,
                                                                  self.rec_B_background_mask)
                                     ) * lambda_background_mask

        # GAN loss D_A(G_A(A))
        self.loss_G_A = self.criterionGAN(self.netD_A(self.fake_B), True)
        # GAN loss D_B(G_B(B))
        self.loss_G_B = self.criterionGAN(self.netD_B(self.fake_A), True)
        # Forward cycle loss || G_B(G_A(A)) - A||
        self.loss_cycle_A = self.criterionCycle(self.rec_A, self.real_A) * lambda_A
        # Backward cycle loss || G_A(G_B(B)) - B||
        self.loss_cycle_B = self.criterionCycle(self.rec_B, self.real_B) * lambda_B
        # combined loss and calculate gradients
        self.loss_G = self.loss_G_A + self.loss_G_B + self.loss_cycle_A + \
                      self.loss_cycle_B + self.loss_idt_A + self.loss_idt_B + \
                      self.content_loss + self.background_mask_loss
        self.loss_G.backward()
        return self.loss_G.item(), self.loss_G_A.item(), self.loss_G_B.item(), \
               self.loss_cycle_A.item(), self.loss_cycle_B.item(), self.background_mask_loss.item()

    def optimize_parameters(self):
        """Calculate losses, gradients, and update network weights; called in every training iteration"""
        # forward
        self.forward()  # compute fake images and reconstruction images.
        # G_A and G_B
        self.set_requires_grad([self.netD_A, self.netD_B], False)  # Ds require no gradients when optimizing Gs
        self.optimizer_G.zero_grad()  # set G_A and G_B's gradients to zero
        loss_G_list = self.backward_G()  # calculate gradients for G_A and G_B
        self.optimizer_G.step()  # update G_A and G_B's weights
        # D_A and D_B
        self.set_requires_grad([self.netD_A, self.netD_B], True)
        self.optimizer_D.zero_grad()  # set D_A and D_B's gradients to zero
        loss_D_A = self.backward_D_A()  # calculate gradients for D_A
        loss_D_B = self.backward_D_B()  # calculate graidents for D_B
        self.optimizer_D.step()  # update D_A and D_B's weights
        return loss_G_list, loss_D_A + loss_D_B

    def load_networks(self):
        if self.config.pretrain_weight_G_A and self.config.pretrain_weight_G_B:
            print(f"load {self.config.pretrain_weight_G_A}")
            state_dict_G_A = torch.load(self.config.pretrain_weight_G_A, map_location=str(self.device))
            self.netG_A.load_state_dict(state_dict_G_A)
            print(f"load {self.config.pretrain_weight_G_B}")
            state_dict_G_B = torch.load(self.config.pretrain_weight_G_B, map_location=str(self.device))
            self.netG_B.load_state_dict(state_dict_G_B)
        if self.config.phase == "train" and self.config.pretrain_weight_D_A and self.config.pretrain_weight_D_B:
            print(f"load {self.config.pretrain_weight_D_A}")
            state_dict_D_A = torch.load(self.config.pretrain_weight_D_A, map_location=str(self.device))
            self.netD_A.load_state_dict(state_dict_D_A)
            print(f"load {self.config.pretrain_weight_D_B}")
            state_dict_D_B = torch.load(self.config.pretrain_weight_D_B, map_location=str(self.device))
            self.netD_B.load_state_dict(state_dict_D_B)

    def set_requires_grad(self, nets, requires_grad=False):
        for net in nets:
            for param in net.parameters():
                param.requires_grad = requires_grad

    def setup(self):
        if self.config.phase == "train":
            self.optimizer_G = torch.optim.Adam(itertools.chain(self.netG_A.parameters(), self.netG_B.parameters()),
                                                lr=self.config.lr, betas=(0.5, 0.999))
            self.optimizer_D = torch.optim.Adam(itertools.chain(self.netD_A.parameters(), self.netD_B.parameters()),
                                                lr=self.config.lr, betas=(0.5, 0.999))
            self.lr_scheduler_G = torch.optim.lr_scheduler.LambdaLR(self.optimizer_G,
                                                                    lr_lambda=LambdaLR(self.config.n_epochs,
                                                                                       self.config.epoch,
                                                                                       self.config.decay_epoch,
                                                                                       self.config.warm_up_epoch).step)
            self.lr_scheduler_D = torch.optim.lr_scheduler.LambdaLR(self.optimizer_D,
                                                                    lr_lambda=LambdaLR(self.config.n_epochs,
                                                                                       self.config.epoch,
                                                                                       self.config.decay_epoch,
                                                                                       self.config.warm_up_epoch).step)
            print_networks([self.netG_A, self.netG_B, self.netD_A, self.netD_B])

    def update_learning_rate(self):
        old_lr = self.optimizer_D.param_groups[0]['lr']
        self.lr_scheduler_G.step()
        self.lr_scheduler_D.step()
        lr = self.optimizer_D.param_groups[0]['lr']
        print('learning rate %.7f -> %.7f' % (old_lr, lr))

    def save_networks(self, suffix):
        generator_A_name = f"net_G_A_{suffix}.pth"
        generator_B_name = f"net_G_B_{suffix}.pth"
        discriminator_A = f"net_D_A_{suffix}.pth"
        discriminator_B = f"net_D_B_{suffix}.pth"
        save_suffix = os.path.join(self.config.result_dir, self.config.experiment_name)
        generator_A_path = os.path.join(save_suffix, generator_A_name)
        generator_B_path = os.path.join(save_suffix, generator_B_name)
        discriminator_A_path = os.path.join(save_suffix, discriminator_A)
        discriminator_B_path = os.path.join(save_suffix, discriminator_B)
        if self.config.gpu_ids[0] >= 0 and torch.cuda.is_available():
            torch.save(self.netG_A.cpu().state_dict(), generator_A_path)
            torch.save(self.netG_B.cpu().state_dict(), generator_B_path)
            torch.save(self.netD_A.cpu().state_dict(), discriminator_A_path)
            torch.save(self.netD_B.cpu().state_dict(), discriminator_B_path)
            self.netG_A.cuda(self.config.gpu_ids[0])
            self.netD_A.cuda(self.config.gpu_ids[0])
            self.netG_B.cuda(self.config.gpu_ids[0])
            self.netD_B.cuda(self.config.gpu_ids[0])
        else:
            torch.save(self.netG_A.cpu().state_dict(), generator_A_path)
            torch.save(self.netG_B.cpu().state_dict(), generator_B_path)
            torch.save(self.netD_A.cpu().state_dict(), discriminator_A_path)
            torch.save(self.netD_B.cpu().state_dict(), discriminator_B_path)

    def eval(self):
        self.netG_A.eval()
        self.netG_B.eval()

    def test(self):
        with torch.no_grad():
            self.forward()

    def get_current_visuals(self):
        visual_ret = OrderedDict()
        for name in self.visual_names:
            value = getattr(self, name)
            if not isinstance(value, list):
                if len(value.shape) == 3:
                    value = value.unsqueeze(0)
                visual_ret[name] = value
            else:
                for index, image in enumerate(value):
                    if len(image.shape) == 3:
                        image = image.unsqueeze(0)
                    visual_ret[name + f"_{index}"] = image
        return visual_ret

    def get_image_paths(self):
        return self.image_paths
